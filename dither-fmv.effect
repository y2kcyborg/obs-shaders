// Dither/FMV shader
// by Millennium Cyborg
// for use with OBS and either StreamFX or obs-shaderfilter

// Loosely based on the encoding method in ffmpeg's RPZA encoder:
// https://ffmpeg.org/doxygen/trunk/rpzaenc_8c_source.html

////////////////////////////////////////////////////////////////
// Detect StreamFX with defines only provides by StreamFX

#ifdef GS_DEVICE_DIRECT3D
#define PLUGIN_STREAMFX
#endif

#ifdef GS_DEVICE_OPENGL
#define PLUGIN_STREAMFX
#endif

#ifndef PLUGIN_STREAMFX
#define PLUGIN_SHADERFILTER
#endif

////////////////////////////////////////////////////////////////
// Compatibility declations and definitions

// Always provided by OBS
uniform float4x4 ViewProj<
    bool automatic = true;
    string name = "View Projection Matrix";
>;

#ifdef PLUGIN_STREAMFX

// Provided by StreamFX
uniform texture2d InputA<
    bool automatic = true;
>;

uniform float4 ViewSize<
    bool automatic = true;
>;

#define SOURCE_SIZE_PX ViewSize
#define INPUT_TEX InputA
#define OUTPUT_CONVERSION
#define INPUT_CONVERSION

#endif

#ifdef PLUGIN_SHADERFILTER

uniform texture2d image;

// For now, not implementing uv_offset and uv_scale
uniform float2 uv_size;

#define SOURCE_SIZE_PX uv_size
#define INPUT_TEX image
#define OUTPUT_CONVERSION srgb_nonlinear_to_linear
#define INPUT_CONVERSION srgb_linear_to_nonlinear

#endif

////////////////////////////////////////////////////////////////
// Shader parameters

uniform float _01_PixelScale<
    bool automatic = false;
    string name = "Pixel Scale";
    string description = "> 1 for nearest-neighbour downsampling";
    string field_type = "slider";
    string widget_type = "slider";
    float minimum = 1;
    float maximum = 8;
    float step = 0.1;
> = 1;

uniform float _01b_PixelAspect<
    bool automatic = false;
    string name = "Pixel Aspect";
    string description = "Non-square pixels if != 1";
    string field_type = "slider";
    string widget_type = "slider";
    float minimum = -4;
    float maximum = 4;
    float step = 0.1;
> = 1;

uniform float _02_ColorQuant<
    bool automatic = false;
    string name = "Color Values Per Channel";
    string description = "Quantize color down to this many values per channel";
    string field_type = "slider";
    string widget_type = "slider";
    float minimum = 1;
    float maximum = 256;
    float step = 1;
> = 16;

uniform float _03_Dither_Strength<
    bool automatic = false;
    string name = "Dither Strength";
    string description = "More dither!!";
    string field_type = "slider";
    string widget_type = "slider";
    float minimum = 0;
    float maximum = 5.0;
    float step = 0.1;
> = 1.0;

uniform float _04_DitherSuperScale<
    bool automatic = false;
    string name = "Dither Superscale";
    string description = "uhhhh neat effect";
    string field_type = "slider";
    string widget_type = "slider";
    float minimum = 1;
    float maximum = 8;
    float step = 0.1;
> = 1;

uniform bool _05_FMV_Encode<
    string label = "FMV encode (default: true)";
> = true;

uniform float _06_Threshold_Solid<
    string label = "Threshold: Solid (1-color block) (default: 0.015)";
    string field_type = "slider";
    string widget_type = "slider";
    float minimum = 0.0;
    float maximum = 1.0;
    float step = 0.001;
> = 0.015;

uniform float _07_Threshold_Gradient<
    string label = "Threshold: Gradient (4-color block) (default: 0.027)";
    string field_type = "slider";
    string widget_type = "slider";
    float minimum = 0.0;
    float maximum = 1.0;
    float step = 0.001;
> = 0.027;

////////////////////////////////////////////////////////////////
// Shader code

sampler_state def_sampler {
    AddressU  = Clamp;
    AddressV  = Clamp;
    Filter    = Linear;
};

struct VertData {
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in) {
    VertData vert_out;
    vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv  = v_in.uv;
    return vert_out;
}

// UV: 0 to 1
// tx: 0 to SOURCE_SIZE_PX-1
// px: depends on pixel scale and aspect ratio

float2 txFromUv(float2 uv) {
    return floor(uv * SOURCE_SIZE_PX.xy);
}

float2 uvFromTx(float2 tx) {
    return (tx + 0.5) / SOURCE_SIZE_PX.xy;
}

float2 pxFromTx(float2 tx, float2 pxScale)
{
    return floor(tx / pxScale);
}

float2 txFromPx(float2 px, float2 pxScale)
{
    return floor((px + 0.5f) * pxScale);
}

// From libobs/data/color.effect
// Can't get the relevant include to work at the moment

float srgb_linear_to_nonlinear_channel(float u)
{
    return (u <= 0.0031308) ? (12.92 * u) : ((1.055 * pow(u, 1. / 2.4)) - 0.055);
}

float3 srgb_linear_to_nonlinear(float3 v)
{
    return float3(srgb_linear_to_nonlinear_channel(v.r), srgb_linear_to_nonlinear_channel(v.g), srgb_linear_to_nonlinear_channel(v.b));
}

float srgb_nonlinear_to_linear_channel(float u)
{
    return (u <= 0.04045) ? (u / 12.92) : pow((u + 0.055) / 1.055, 2.4);
}

float3 srgb_nonlinear_to_linear(float3 v)
{
    return float3(srgb_nonlinear_to_linear_channel(v.r), srgb_nonlinear_to_linear_channel(v.g), srgb_nonlinear_to_linear_channel(v.b));
}

float3 quantize(float3 col, float dither)
{
    float Q = _02_ColorQuant - 1;
    return round(col * Q + dither) / Q;
}

float4 sampleWithDither(float2 px, float2 pxScale)
{
    float2 tx = txFromPx(px, pxScale);

    // Get source color, preserving alpha
    float4 col = INPUT_TEX.Sample(def_sampler, uvFromTx(tx));
    col.rgb = INPUT_CONVERSION(col.rgb);

    // Dither
    const float4x4 ditherTable =
    {
        0, 8, 2, 10,
        12, 4, 14, 6,
         3, 11, 1, 9,
        15, 7, 13, 5
    };

    // Quantize color and dither
    int2 dither_idx = floor(px / _04_DitherSuperScale) % 4;
    float ditherVal = _03_Dither_Strength * (ditherTable[dither_idx.x][dither_idx.y] / 16.0f - 0.5f);
    col.rgb = quantize(col.rgb, ditherVal);
    
    return col;
}

// rotate components
float3 rotateCol(float3 col, int amount)
{
    amount %= 3;

    if (amount == 0)
        return col;
   
    if (amount == 1)
        return col.gbr;
    
    return col.brg;
}

float calcSquareError(float3 ref, float3 col)
{
    float3 d = saturate(abs(col - ref));
    return dot(d, d);
}

// Calculating per-pixel isn't ideal but it'll do for now
void calcGradient(int2 blockCoord, float2 pxScale, out float3 mean, out float3 startCol, out float3 endCol)
{
    // What I think the correct ordering is:
    // 1) add dither mask scaled down appropriately (/16 then /32) and offset appropriately (-8/16)
    // 2) calc gradient
    // 3) find nearest colours in rgb555
    // Here I follow the method in the ffpmeg RPZA encoder:
    // ( https://ffmpeg.org/doxygen/trunk/rpzaenc_8c_source.html )
    // pick as primary the channel with the largest range of values.
    // that channel has a gradient from its min to its max.
    // for the other two channels, use a least squares regression.

    // find min/max per channel
    float3 minCol = { 1, 1, 1 };
    float3 maxCol = { 0, 0, 0 };

    float3 sum = { 0, 0, 0 }; // r, g, b
    float3 sumSq = { 0, 0, 0 }; // rr, gg, bb
    float3 sumProd = { 0, 0, 0 }; // bg, gr, rb (index by (max+cur)%3)

    for (int bx = 0; bx < 4; ++bx)
    {
        for (int by = 0; by < 4; ++by)
        {
            int2 px = blockCoord * 4 + int2(bx, by);
            float3 col = sampleWithDither(px, pxScale);
            minCol = min(minCol, col);
            maxCol = max(maxCol, col);
            sum += col;
            sumSq += col * col;
            sumProd += float3(col.b * col.g, col.g * col.r, col.r * col.b);
        }
    }

    // find max range across channels
    int maxChanIdx = 0;
    float maxChanRange = 0;
    float3 chanRange = abs(minCol - maxCol);
    for (int c = 0; c < 3; ++c)
    {
        if (chanRange[c] > maxChanRange)
        {
            maxChanIdx = c;
            maxChanRange = chanRange[c];
        }
    }

    float3 maxChanMask = (int3(0, 1, 2) == maxChanIdx) ? 1.0f : 0.0f;

    sumProd = rotateCol(sumProd, maxChanIdx);

    // find slope per channel vs max channel
    float3 m = { 1, 1, 1 };
    float3 b = { 0, 0, 0 };

    float d = 16.0f * sumSq[maxChanIdx] - sum[maxChanIdx] * sum[maxChanIdx];

    mean = sum / 16.0f;

    // Avoid div by 0. All the pixels in the block are the same colour or very close.
    if (abs(d) < 0.00001f)
    {
        startCol = endCol = mean;
    }
    else
    {
        // This is a rearrangement of the least squares regression formula
        float sumMax = sum[maxChanIdx];
        m = (16.0f * sumProd - sumMax * sum) / d;
        b = (sum - m * sumMax) / 16.0f;

        startCol = maxChanMask ? minCol : m * minCol[maxChanIdx] + b;
        endCol = maxChanMask ? maxCol : m * maxCol[maxChanIdx] + b;
    }

    startCol = saturate(startCol);
    endCol = saturate(endCol);
}

float3 rpzaEncode(float2 sourcePx, float2 pxScale)
{
    int2 coordInBlock = (int2) floor(sourcePx % 4);
    int2 blockCoord = (int2) floor(sourcePx / 4);

    // NOTE: error calcs not going to be as accurate as they could be because they're not taking the quantization into account

    // Compute the gradient by least squares
    float3 mean = float3(0, 0, 0);
    float3 startCol = float3(0, 0, 0);
    float3 endCol = float3(1, 1, 1);
    calcGradient(blockCoord, pxScale, mean, startCol, endCol);

    mean = quantize(mean, 0);
    startCol = quantize(startCol, 0);
    endCol = quantize(endCol, 0);

    // Compute 4-col gradient
    float3 gradCol[4];
                
    for (int i = 0; i < 4; ++i)
    {
        float3 p = lerp(startCol, endCol, i / 3.0);
        // convert to rgb555
        gradCol[i] = quantize(p, 0);
    }

    // Iterate pixels and compute total square error then sqrt mean square error

    float sumSqErr1 = 0.0f;
    float sumSqErr4 = 0.0f;

    for (int bx = 0; bx < 4; ++bx)
    {
        for (int by = 0; by < 4; ++by)
        {
            int2 px = blockCoord * 4 + int2(bx, by);
            float3 col = sampleWithDither(px, pxScale);
            
            sumSqErr1 += calcSquareError(col, mean);

            // Find closest color in gradient
            float minErr = 9999999.0;
            float3 minErrCol = { 1, 1, 1 };
            for (int i = 0; i < 4; ++i)
            {
                float3 p = gradCol[i];
                float err = calcSquareError(p, col);
                if (err < minErr)
                {
                    minErrCol = p;
                    minErr = err;
                }
            }
                        
            sumSqErr4 += minErr;
        }
    }

    float err1 = sqrt(sumSqErr1 / (3 * 16.0));
    float err4 = sqrt(sumSqErr4 / (3 * 16.0));

    float3 col = sampleWithDither(sourcePx, pxScale);

    // option 1: single color
    if (err1 < _06_Threshold_Solid)
    {
        return float4(mean, 1);
    }

    // option 2: 4 colors
    if (err4 < _07_Threshold_Gradient)
    {
        // Find closest color in gradient
        float minErr = 9999999.0;
        float3 minErrCol = { 1, 1, 1 };
        for (int i = 0; i < 4; ++i)
        {
            float3 p = gradCol[i];
            float err = calcSquareError(p, col);
            if (err < minErr)
            {
                minErrCol = p;
                minErr = err;
            }
        }
        return float4(minErrCol, 1);
    }
    
    // option 3: 16 colors
    return float4(quantize(col, 0), 1);
}

float4 PSDefault(VertData v_in) : TARGET {
    float2 uv = v_in.uv;
    float2 tx = txFromUv(uv); // pixel center

    // Pixel aspect
    float pxAspect = _01b_PixelAspect;

    if (pxAspect == 0)
        pxAspect = 1;

    if (pxAspect < 0)
        pxAspect = 1 / pxAspect;

    float2 pxScale = _01_PixelScale * float2(pxAspect, 1);

    float2 px = pxFromTx(tx, pxScale);
  
    float4 col = sampleWithDither(px, pxScale);

    if (_05_FMV_Encode)
    {
        col.rgb = rpzaEncode(px, pxScale);
    }

    col.rgb = OUTPUT_CONVERSION(col.rgb);

    return col;
}

technique Draw
{
    pass
    {
        vertex_shader = VSDefault(v_in);
        pixel_shader  = PSDefault(v_in);
    }
}
